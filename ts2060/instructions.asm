OFFS:	EQU	50
INST_TAB:
	DEFB	LABEL_T+OFFS
	DEFB	P_LABEL - $	; 2' @ / LABEL
	DEFB	DPOKE_T+OFFS
	DEFB	P_DPOKE - $	; Ex + L' DPOKE
	DEFB	FPOKE_T+OFFS
	DEFB	P_FPOKE - $	; X' FPOKE
	DEFB	SOUND_T+OFFS
	DEFB	P_SOUND - $	; SOUND
	DEFB	USR_T+OFFS
	DEFB	P_USR - $
	DEFB	PLAY_T+OFFS
	DEFB	P_PLAY - $	; PLAY
	DEFB	DELETE_T+OFFS
	DEFB	P_DELETE - $	; DELETE
	DEFB	ONERR_T+OFFS
	DEFB	P_ONERR - $	; ON ERR
	DEFB	SCREEN_T+OFFS
	DEFB	P_DISPLAY - $	; Ex + K' DISPLAY
	DEFB	RESET_T+OFFS
	DEFB	P_RESET - $	; RESET
	DEFB	SPECTRUM_T+OFFS
	DEFB	P_SPECTRUM - $	; SPECTRUM
	DEFB	0

P_LABEL:DEFB	$05
	DEFW	LABEL

P_ONERR:DEFB	GOTO_T,$06,$00
	DEFW	ON_ERR

P_DPOKE:DEFB	$08,$00
	DEFW	DPOKE

P_FPOKE:DEFB	$08,$00
	DEFW	FPOKE

P_SOUND:DEFB	$05
	DEFW	SOUND

P_USR:	DEFB	$06,$00
	DEFW	USR

P_DELETE:
	DEFB	$05
	DEFW	DELETE

P_DISPLAY:
	DEFB	$03
	DEFW	DISPLAY

P_PLAY:	DEFB	$05
	DEFW	PLAY

P_SPECTRUM:
	DEFB	$00
	DEFW	SPECTRUM

P_RESET:DEFB	$07,$00
	DEFW	RESET_I

CHECK_END:
	CALL	SYNTAX_Z
	RET	NZ
END05_E:POP	BC		; SCAN-LOOP
END05:	POP	BC		; STMT-RET
STMT_NEXT:
	RST	$18
	CP	$0D		; CR
	JR	Z,LINE_END
	CP	":"
	JR	Z,STMT_LOOP
	JR	ERROR_C_I

STMT_LOOP:
	LD	HL,L1B28	; STMT-LOOP
	PUSH	HL
	RST	$10

LINE_END:
	BIT	7,(IY+$01)
	JR	Z,LE_SWAP
	LD	HL,(NXTLIN)
	LD	A,$C0
	AND	(HL)
	JR	NZ,LE_SWAP	; program finished
	PUSH	HL
	LD	HL,L1BBF - 1	; XOR A, LINE-USE
	EX	(SP),HL
LE_SWAP:RST	$10

CMDCLASS2:
	DEFB	CLASS2_00 - $	; parameterless instruction
	DEFB	CLASS2_01 - $	; do something to a variable
	DEFB	CLASS2_02 - $	; prepare value for assignment
	DEFB	CLASS2_03 - $	; one numeric parameter, defaults to zero
	DEFB	CLASS2_04 - $	; used by FOR & NEXT -- TODO: may be worth replacing
	DEFB	CLASS2_05 - $	; list of items
	DEFB	CLASS2_06 - $	; evaluate single numeric expression
	DEFB	CLASS2_07 - $	; optionally open stream before execution
	DEFB	CLASS2_08 - $	; two numeric expressions, separated by comma

CLASS2_03:
	CALL	FETCH_NUM
CLASS2_00:
	CP	A
CLASS2_05:
	POP	BC
	CALL	Z,CHECK_END
	EX	DE,HL
	LD	HL,(T_ADDR)
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	EX	DE,HL
	PUSH	BC
	RET

CLASS2_01:
	RST	$30
	DEFW	L1C1F		; CLASS_01
	RET

CLASS2_02:
	RST	$30
	DEFW	L1C4E		; CLASS_02
	RET

CLASS2_04:
	RST	$30
	DEFW	L1C6C		; CLASS_04
	RET

NEXT_2NUM:
	RST	$20

CLASS2_08:
	CALL	CLASS2_06
	CP	","
	JR	NZ,ERROR_C_I
NEXT_1NUM:
	RST	$20

CLASS2_06:
	RST	$30
	DEFW	L24FB		; SCANNING
	BIT	6,(IY+$01)
	RET	NZ

ERROR_C_I:
	JP	ERROR_C

FETCH_NUM:
	CP	$0D
	JR	Z,USE_ZERO
	CP	":"
	JR	NZ,CLASS2_06

USE_ZERO:
	RST	$30
	DEFW	L1CE6		; USE-ZERO
	RET

CLASS2_07:
	RST	$30
	DEFW	L2070		; STR-ALTER
	RET	NC
	LD	HL,(T_ADDR)
	LD	A,(HL)
	OR	A
	JR	Z,CL7_E
	INC	HL
	LD	(T_ADDR),HL
CL7_E:	CALL	UNSTACK_Z
	LD	(IY+CURCHL+1-ERR_NR),$00
	RET

DELIM:	DEFB	$0D
	DEFM	":,;)"
DELIM_E:

FROM_1:	CALL	SYNTAX_Z
	JR	Z,FROM_1R
	RST	$30
	DEFW	L1CE6 + 4	; USE-ZERO + 4
	INC	HL
	INC	HL
	LD	(HL),$01	; ONE
	JR	FROM_1R

CLASS2_0A:
	RST	$18
	CP	TO_T
	JR	Z,FROM_1
	CALL	CLASS2_06	; beginning
	CP	TO_T
	JR	NZ,TO_SAME
FROM_1R:RST	$20
	LD	HL,DELIM
	LD	BC,DELIM_E - DELIM
	CPIR
	JR	NZ,CLASS2_06

	CALL	UNSTACK_Z
	RST	$28
	DEFB	$A1		; stk-one
	DEFB	$1B		; negate
	DEFB	$38		; end
	RET

TO_SAME:CALL	UNSTACK_Z
	RST	$28
	DEFB	$31		; duplicate
	DEFB	$38		; end
	RET

; instruction routines
	INCLUDE	"display.asm"
	INCLUDE	"spectrum.asm"
	INCLUDE	"play.asm"
	INCLUDE	"sound.asm"
	INCLUDE	"poke.asm"
	INCLUDE	"onerr.asm"
	INCLUDE	"label.asm"
	INCLUDE	"delete.asm"
	INCLUDE	"reset.asm"
	INCLUDE	"usr.asm"
