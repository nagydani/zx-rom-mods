TEMPS_CONT:
	IN	A,($FF)
	LD	HL,BORDCR
	XOR	(HL)
	OR	$38
	XOR	(HL)
	OUT	($FF),A		; Set BORDER for TIMEX HiRes
	RST	RST10

COL64:	IN	A,($FF)
	AND	$04
	RET

P_RST:	LD	HL,RESET_P
	PUSH	HL
	RST	$10

K_RST:	RES	5,(IY+TV_FLAG-ERR_NR)
	LD	B,(IY+DF_SZ-ERR_NR)
	RST	$30
	DEFW	L0E44		; CL-LINE
	LD	HL,$5AC0
	LD	A,(ATTR_P)
	DEC	B
	JR	CLS3
CLS1:	LD	C,$20
CLS2:	DEC	HL
	LD	(HL),A
	DEC	C
	JR	NZ,CLS2
CLS3:	DJNZ	CLS1
	LD	(IY+DF_SZ-ERR_NR),2
	LD	BC,$1721	;TODO: 64 columns
	CALL	CLSET
	RST	$10

S_TAB:	DEFW	S_RST
	DEFW	AUTOLIST
	DEFW	PLOT0
	DEFW	DR_LINE
	DEFW	DR_ARC
	DEFW	DR_CIRCLE
S_TAB_E:EQU	$

S_RST:	LD	HL,0
	LD	(COORDS),HL
	RES	0,(IY+FLAGS2-ERR_NR)
	RST	$30
	DEFW	L0D4D		; TEMPS
	LD	B,$18
	RST	$30
	DEFW	L0E44		; CL-LINE
	LD	(IY+SCR_CT-ERR_NR),1
	LD	BC,$1821	; TODO: 64 columns
	CALL	CLSET
	RST	$10

AUTOLIST:
	LD	HL,L1795
	PUSH	HL
	RST	$10

PLOT0:	LD	HL,L22DC		; TODO: 512 columns
	PUSH	HL
	RST	$10

DR_LINE:
	LD	HL,L24B7
	PUSH	HL
	RST	$10

DR_ARC:
	LD	HL,ARC_DRAW
	PUSH	HL
	RST	$10

DR_CIRCLE:
	LD	HL,DCRCLE
	PUSH	HL
	RST	$10

IOCTL:	CP	$0D
	JR	NC,IOCTL0
	EX	AF,AF'
	RST	RST30
	DEFW	L21D6		; IN-CHAN-K
	JR	Z,K_RST
	LD	BC,$1821
	CP	"S"
	JR	NZ,P_RST
	CALL	COL64
	JR	Z,S_IOCTL
	LD	C,$41		; 64 columns
S_IOCTL:EX	AF,AF'
	ADD	A,A
	CP	S_TAB_E-S_TAB
	JR	NC,S_RST
	LD	E,A
	LD	D,0
	LD	HL,S_TAB
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	EX	DE,HL
	JP	(HL)

PR_OUT:	JR	NC,IOCTL
	LD	C,$FF
	IN	C,(C)
	BIT	2,C
	JR	Z,PR_32
	LD	(IY+MASK_T-ERR_NR),$FF ; do not touch attributes in mono mode
PR_32:	CALL	PR_FETCH
	CP	" "
	JR	NC,PR_ABLE
	CP	$06
	JR	C,PR_QUEST
	CP	$18
	JR	NC,PR_QUEST
	CP	$0E
	JR	C,PR_CTRL1	; controls in ROM1
	CP	$16
	JR	C,PR_1_OPER
PR_2_OPER:
	LD	HL,PR_TV_2
	JR	PR_TV_1
PR_1_OPER:
	LD	HL,PR_CONT
PR_TV_1:LD	(TVDATA),A
	JR	PRCHANGE
PR_TV_2:JR	NC,PR_CONT
	LD	HL,PR_CONT
	LD	(TVDATA+1),A
PRCHANGE:
	LD	(P_OUT1),HL
IOCTL0:	RST	$10

PR_QUEST:
	LD	HL,PO_QUEST
	PUSH	HL
	RST	$10

PR_CTRL1:
	PUSH	HL
	LD	HL,PO_CTRL
	EX	(SP),HL
	RST	$10

PR_CONT:LD	HL,PR_OUT
	LD	(P_OUT1),HL
	JR	NC,IOCTL
	LD	HL,XPRCONT
	PUSH	HL
	RST	$10

PR_FETCH:	; TODO: 64-column mode
	RST	$30
	DEFW	L0B03	; PO-FETCH
	RET

PR_ABLE:BIT	2,(IY+FLAGS2-ERR_NR)
	JR	NZ,IN_QUOT
	CP	$80
	JR	C,IN_QUOT
	CP	RND_T
	JR	C,UDG_TOKEN
IN_QUOT:RST	$30
	DEFW	L0B24		; PO-ANY
	LD	E,C
	LD	C,$FF
	IN	C,(C)
	BIT	1,C
	JR	Z, PR_ABC
	BIT	2,C
	JR	Z,PR_MULTI
	BIT	0,E
	JR	NZ,PR_ODD
	DEC	HL		; DEC L ?
	SET	5,H
	JR	PR_ABC
PR_ODD:	RES	5,H
PR_ABC:	LD	C,E
	PUSH	HL
	LD	HL,L0ADC	; PO-STORE
	EX	(SP),HL
	RST	$10

PR_MULTI:
	PUSH	HL
	DEC	HL
	SET	5,H
	LD	(HL),A
	INC	H
	LD	(HL),A
	INC	H
	LD	(HL),A
	INC	H
	LD	(HL),A
	INC	H
	LD	(HL),A
	INC	H
	LD	(HL),A
	INC	H
	LD	(HL),A
	INC	H
	LD	(HL),A
	POP	HL
	JR	PR_ABC

UDG_TOKEN:
	CP	INSTRUCTION_T
	JR	C,ARG_TOK
	BIT	0,(IY+FLAGS-ERR_NR)	; leading space
	JR	NZ,SKIPSP
	PUSH	AF
	LD	A," "
	RST	$30
	DEFW	L0C3B			; PO-SAVE
	POP	AF
SKIPSP:	CALL	TOKEN_O
	RRCA
	RST	$30
	DEFW	L2C8D			; ALPHA (could be ALPHANUM)
	JR	NC,SKIPTS
	LD	A," "
	LD	HL, L0C3B		; PO-SAVE
	PUSH	HL
SKIPTS:	RST	$10

ARG_TOK:CALL	TOKEN_O
	RST	$10

TOKEN_O:SUB	$7F
	LD	B,A
	LD	DE, TOKENS
	JP	TOKEN

CLSET:	IN	A,($FF)
	CP	5
	JR	C,CLSETR1		; in color modes, use ROM1
	BIT	1,(IY+FLAGS-ERR_NR)
	JR	NZ,CLSETR1		; for the printer use ROM1
	LD	A,B
	BIT	0,(IY+TV_FLAG-ERR_NR)
	JR	Z,CLSET1
	ADD	A,(IY+DF_SZ-ERR_NR)
	SUB	$18
CLSET1:	PUSH	BC
	LD	B,A
	RST	$30
	DEFW	L0E9B			; CL-ADDR
	POP	BC
	LD	A,$41
	SUB	C
	RRA
	LD	E,A
	LD	D,0
	JR	NC,CLODD
	LD	D,$20
CLODD:	ADD	HL,DE
	RST	$30
	DEFW	L0ADC			; PO-STORE
	RET

CLSETR1:RST	$30
	DEFW	L0DD9	; CL-SET
	RET
